{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Constants from 'expo-constants';\nimport { Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction loginUser(credentials) {\n  return _regeneratorRuntime.async(function loginUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", fetch('http://localhost:5000/login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(credentials)\n          }).then(function (data) {\n            return data.json();\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function Login(_ref) {\n  var setToken = _ref.setToken;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setUserName = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var handleSubmit = function handleSubmit(e) {\n    var token;\n    return _regeneratorRuntime.async(function handleSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(loginUser({\n              username: username,\n              password: password\n            }));\n\n          case 3:\n            token = _context2.sent;\n            setToken(token);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.background,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"CampusDate\"\n    }), _jsx(TextInput, {\n      style: styles.inputbox,\n      keyboardType: \"email-address\",\n      placeholder: \"email\",\n      autoCorrect: false,\n      onChange: function onChange(e) {\n        return setUserName(e.target.value);\n      }\n    }), _jsx(TextInput, {\n      style: styles.inputbox,\n      autoCorrect: false,\n      placeholder: \"password\",\n      secureTextEntry: true,\n      onChange: function onChange(e) {\n        return setPassword(e.target.value);\n      }\n    }), _jsx(Link, {\n      to: \"/profile\",\n      children: _jsx(Pressable, {\n        style: styles.buttons,\n        onPress: handleSubmit,\n        type: \"submit\",\n        children: _jsx(Text, {\n          style: styles.buttonsText,\n          children: \"Login\"\n        })\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  inputbox: {\n    backgroundColor: 'white',\n    borderRadius: 5,\n    fontSize: 20,\n    padding: 3,\n    borderColor: 'grey',\n    marginTop: '5%',\n    marginHorizontal: '20%'\n  },\n  buttons: {\n    borderRadius: 20,\n    borderColor: 'grey',\n    marginTop: '5%',\n    marginHorizontal: '20%',\n    textAlign: 'center',\n    borderWidth: 2\n  },\n  buttonsText: {\n    margin: '1%',\n    textAlign: 'center',\n    color: 'grey',\n    fontSize: 25\n  },\n  background: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: 'pink',\n    padding: 8\n  },\n  title: {\n    backgroundColor: 'none',\n    margin: 1,\n    fontSize: 50,\n    color: 'grey',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  }\n});\nLogin.propTypes = {\n  setToken: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["C:/Users/Sage/Documents/GitHub/CampusDate/mern/campusdate/src/components/login/login.component.js"],"names":["React","useState","Constants","Link","PropTypes","loginUser","credentials","fetch","method","headers","body","JSON","stringify","then","data","json","Login","setToken","username","setUserName","password","setPassword","handleSubmit","e","preventDefault","token","styles","background","title","inputbox","target","value","buttons","buttonsText","StyleSheet","create","backgroundColor","borderRadius","fontSize","padding","borderColor","marginTop","marginHorizontal","textAlign","borderWidth","margin","color","flex","justifyContent","fontWeight","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n  Pressable,\r\n  Button,\r\n  Alert,\r\n  TextInput,\r\n} from 'react-native';\r\nimport Constants from 'expo-constants';\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\nasync function loginUser(credentials){\r\n  return fetch('http://localhost:5000/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(credentials)\r\n  })\r\n    .then(data=>data.json())\r\n}\r\n\r\nexport default function Login({setToken}) {\r\n  const [username, setUserName] = useState();\r\n  const [password, setPassword] = useState();\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    const token = await loginUser({\r\n      username,\r\n      password\r\n    });\r\n    setToken(token);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.background}>\r\n      <Text style={styles.title}>CampusDate</Text>\r\n      <TextInput\r\n        style={styles.inputbox}\r\n        keyboardType = \"email-address\"\r\n        placeholder=\"email\"\r\n        autoCorrect = {false}\r\n        onChange={e => setUserName(e.target.value)}\r\n      />\r\n\r\n      <TextInput\r\n        style={styles.inputbox}\r\n        autoCorrect={false}\r\n        placeholder=\"password\"\r\n        secureTextEntry = {true}\r\n        onChange={e => setPassword(e.target.value)}\r\n        />\r\n\r\n      <Link to=\"/profile\">\r\n      <Pressable\r\n        style={styles.buttons}\r\n        onPress={handleSubmit} type = \"submit\">\r\n        <Text style={styles.buttonsText}>Login</Text>\r\n      </Pressable>\r\n      </Link>\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  inputbox: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 5,\r\n    fontSize: 20,\r\n    padding: 3,\r\n    borderColor: 'grey',\r\n    marginTop: '5%',\r\n    marginHorizontal: '20%',\r\n  },\r\n  buttons: {\r\n    borderRadius: 20,\r\n    borderColor: 'grey',\r\n    marginTop: '5%',\r\n    marginHorizontal: '20%',\r\n    textAlign: 'center',\r\n    borderWidth: 2,\r\n  },\r\n  buttonsText: {\r\n    margin: '1%',\r\n    textAlign: 'center',\r\n    color: 'grey',\r\n    fontSize: 25,\r\n  },\r\n  background: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    backgroundColor: 'pink',\r\n    padding: 8,\r\n  },\r\n  title: {\r\n    backgroundColor: 'none',\r\n    margin: 1,\r\n    fontSize: 50,\r\n    color: 'grey',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nLogin.propTypes = {\r\n  setToken: PropTypes.func.isRequired\r\n};"]},"metadata":{},"sourceType":"module"}